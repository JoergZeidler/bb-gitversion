resources:
  - name: source
    type: git
    source:
      uri: ((git_source))
      private_key: ((privatekey))
      branch: ((git_branch))
      skip_ssl_verification: ((git_skip_ssl_verification))
      # This enables triggering on tag changes that match the glob pattern
      # tag_filter: "*"

  - name: bb-gitversion
    type: docker-image
    source:
      repository: elbb/bb-gitversion
      tag: ((bb_gitversion_version))

  - name: s3-gitversion
    type: s3
    source:
      bucket: ((bb_name))
      endpoint: ((s3_endpoint))
      # at least one regex capture group is needed here
      regexp: version/(gitversion).tar.gz
      access_key_id: ((s3_access_key))
      secret_access_key: ((s3_secret_key))
      disable_ssl: ((s3_skip_ssl_verification))

  - name: aws-cli
    type: docker-image
    source:
      repository: amazon/aws-cli
      tag: latest

jobs:
  - name: Generate gitversion and put it on S3
    public: true
    plan:
      - in_parallel:
          - get: bb-gitversion
          - get: source
          - get: aws-cli
      - task: Generate version
        image: bb-gitversion
        config:
          platform: linux
          inputs:
            - name: source
          outputs:
            - name: gen
          run:
            path: /bin/bash
            args:
              - -exc
              - |
                entrypoint.sh && 
                jq empty gen/json/gitversion.json &&
                cat gen/json/gitversion.json && 
                tar cvfz gen/gitversion.tar.gz gen/*
          params:
            GIT_PATH: source
            GEN_PATH: gen
      - task: Check/Create bucket for ((bb_name)) on S3
        image: aws-cli
        config:
          platform: linux
          run:
            path: /bin/bash
            args:
              - -xc
              - |
                mkdir -p ~/.aws
                # hide setting credentials in plain text in concourse ui
                set +x
                export TERM="xterm-256color"
                echo "[default]" > ~/.aws/credentials
                echo "aws_access_key_id=((s3_access_key))" >> ~/.aws/credentials
                echo "aws_secret_access_key=((s3_secret_key))" >> ~/.aws/credentials
                set -x
                # check if bucket exists on s3 endpoint. If not create one
                version=$(cat gen/plain/SemVer)
                aws --endpoint-url ((s3_endpoint)) s3api head-bucket --bucket ((bb_name))-${version} 2> /dev/null
                if [ $? != 0 ]; then aws s3 mb s3://(bb_name))-${version} --endpoint-url ((s3_endpoint)); fi
      - put: s3-gitversion
        params:
          file: gen/gitversion.tar.gz
          acl: public-read
